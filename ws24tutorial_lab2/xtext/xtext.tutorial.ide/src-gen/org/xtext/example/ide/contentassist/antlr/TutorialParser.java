/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.ide.contentassist.antlr.internal.InternalTutorialParser;
import org.xtext.example.services.TutorialGrammarAccess;

public class TutorialParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TutorialGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TutorialGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getShapeAccess().getAlternatives(), "rule__Shape__Alternatives");
			builder.put(grammarAccess.getItemTypeAccess().getAlternatives(), "rule__ItemType__Alternatives");
			builder.put(grammarAccess.getBasicItemTypeAccess().getShapeAlternatives_8_0(), "rule__BasicItemType__ShapeAlternatives_8_0");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getMaterialAccess().getAlternatives(), "rule__Material__Alternatives");
			builder.put(grammarAccess.getFactoryAccess().getGroup(), "rule__Factory__Group__0");
			builder.put(grammarAccess.getCylinderShapeAccess().getGroup(), "rule__CylinderShape__Group__0");
			builder.put(grammarAccess.getBlockShapeAccess().getGroup(), "rule__BlockShape__Group__0");
			builder.put(grammarAccess.getBasicItemTypeAccess().getGroup(), "rule__BasicItemType__Group__0");
			builder.put(grammarAccess.getBasicItemTypeAccess().getGroup_10(), "rule__BasicItemType__Group_10__0");
			builder.put(grammarAccess.getComplexItemTypeAccess().getGroup(), "rule__ComplexItemType__Group__0");
			builder.put(grammarAccess.getColorAccess().getGroup(), "rule__Color__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getItemConnectionAccess().getGroup(), "rule__ItemConnection__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getFactoryAccess().getNameAssignment_1(), "rule__Factory__NameAssignment_1");
			builder.put(grammarAccess.getFactoryAccess().getItemTypesAssignment_3(), "rule__Factory__ItemTypesAssignment_3");
			builder.put(grammarAccess.getCylinderShapeAccess().getLengthAssignment_4(), "rule__CylinderShape__LengthAssignment_4");
			builder.put(grammarAccess.getCylinderShapeAccess().getRadiusAssignment_8(), "rule__CylinderShape__RadiusAssignment_8");
			builder.put(grammarAccess.getBlockShapeAccess().getLengthAssignment_4(), "rule__BlockShape__LengthAssignment_4");
			builder.put(grammarAccess.getBlockShapeAccess().getWidthAssignment_8(), "rule__BlockShape__WidthAssignment_8");
			builder.put(grammarAccess.getBlockShapeAccess().getHeigthAssignment_12(), "rule__BlockShape__HeigthAssignment_12");
			builder.put(grammarAccess.getBasicItemTypeAccess().getNameAssignment_1(), "rule__BasicItemType__NameAssignment_1");
			builder.put(grammarAccess.getBasicItemTypeAccess().getMaterialAssignment_3(), "rule__BasicItemType__MaterialAssignment_3");
			builder.put(grammarAccess.getBasicItemTypeAccess().getShapeAssignment_8(), "rule__BasicItemType__ShapeAssignment_8");
			builder.put(grammarAccess.getBasicItemTypeAccess().getColorAssignment_9(), "rule__BasicItemType__ColorAssignment_9");
			builder.put(grammarAccess.getBasicItemTypeAccess().getMarkersAssignment_10_3(), "rule__BasicItemType__MarkersAssignment_10_3");
			builder.put(grammarAccess.getComplexItemTypeAccess().getNameAssignment_1(), "rule__ComplexItemType__NameAssignment_1");
			builder.put(grammarAccess.getComplexItemTypeAccess().getComponentsAssignment_6(), "rule__ComplexItemType__ComponentsAssignment_6");
			builder.put(grammarAccess.getComplexItemTypeAccess().getComponentsAssignment_7(), "rule__ComplexItemType__ComponentsAssignment_7");
			builder.put(grammarAccess.getComplexItemTypeAccess().getItemConnectionsAssignment_12(), "rule__ComplexItemType__ItemConnectionsAssignment_12");
			builder.put(grammarAccess.getColorAccess().getNameAssignment_1(), "rule__Color__NameAssignment_1");
			builder.put(grammarAccess.getColorAccess().getRedAssignment_6(), "rule__Color__RedAssignment_6");
			builder.put(grammarAccess.getColorAccess().getGreenAssignment_9(), "rule__Color__GreenAssignment_9");
			builder.put(grammarAccess.getColorAccess().getBlueAssignment_12(), "rule__Color__BlueAssignment_12");
			builder.put(grammarAccess.getMarkerAccess().getNameAssignment(), "rule__Marker__NameAssignment");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_0(), "rule__Component__NameAssignment_0");
			builder.put(grammarAccess.getComponentAccess().getItemTypeAssignment_2(), "rule__Component__ItemTypeAssignment_2");
			builder.put(grammarAccess.getItemConnectionAccess().getComponentAAssignment_0(), "rule__ItemConnection__ComponentAAssignment_0");
			builder.put(grammarAccess.getItemConnectionAccess().getMarkerAAssignment_2(), "rule__ItemConnection__MarkerAAssignment_2");
			builder.put(grammarAccess.getItemConnectionAccess().getComponentBAssignment_5(), "rule__ItemConnection__ComponentBAssignment_5");
			builder.put(grammarAccess.getItemConnectionAccess().getMarkerBAssignment_7(), "rule__ItemConnection__MarkerBAssignment_7");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TutorialGrammarAccess grammarAccess;

	@Override
	protected InternalTutorialParser createParser() {
		InternalTutorialParser result = new InternalTutorialParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TutorialGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TutorialGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

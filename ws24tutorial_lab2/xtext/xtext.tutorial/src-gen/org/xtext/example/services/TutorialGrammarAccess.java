/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TutorialGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FactoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.Factory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemTypesItemTypeParserRuleCall_3_0 = (RuleCall)cItemTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Factory returns Factory:
		//    'factory' name=ID '{'
		//        (itemTypes+=ItemType)+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'factory' name=ID '{'
		//    (itemTypes+=ItemType)+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'factory'
		public Keyword getFactoryKeyword_0() { return cFactoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(itemTypes+=ItemType)+
		public Assignment getItemTypesAssignment_3() { return cItemTypesAssignment_3; }
		
		//ItemType
		public RuleCall getItemTypesItemTypeParserRuleCall_3_0() { return cItemTypesItemTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.Shape");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockShapeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCylinderShapeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Shape returns Shape:
		//    BlockShape | CylinderShape
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BlockShape | CylinderShape
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BlockShape
		public RuleCall getBlockShapeParserRuleCall_0() { return cBlockShapeParserRuleCall_0; }
		
		//CylinderShape
		public RuleCall getCylinderShapeParserRuleCall_1() { return cCylinderShapeParserRuleCall_1; }
	}
	public class CylinderShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.CylinderShape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCylinderShapeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLengthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLengthEDoubleParserRuleCall_4_0 = (RuleCall)cLengthAssignment_4.eContents().get(0);
		private final Keyword cCmKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRadiusAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRadiusEDoubleParserRuleCall_8_0 = (RuleCall)cRadiusAssignment_8.eContents().get(0);
		private final Keyword cCmKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//CylinderShape returns CylinderShape:
		//    'CylinderShape' '{'
		//        'l' ':' length=EDouble 'cm'
		//        'r' ':' radius=EDouble 'cm'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CylinderShape' '{'
		//    'l' ':' length=EDouble 'cm'
		//    'r' ':' radius=EDouble 'cm'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'CylinderShape'
		public Keyword getCylinderShapeKeyword_0() { return cCylinderShapeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'l'
		public Keyword getLKeyword_2() { return cLKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//length=EDouble
		public Assignment getLengthAssignment_4() { return cLengthAssignment_4; }
		
		//EDouble
		public RuleCall getLengthEDoubleParserRuleCall_4_0() { return cLengthEDoubleParserRuleCall_4_0; }
		
		//'cm'
		public Keyword getCmKeyword_5() { return cCmKeyword_5; }
		
		//'r'
		public Keyword getRKeyword_6() { return cRKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//radius=EDouble
		public Assignment getRadiusAssignment_8() { return cRadiusAssignment_8; }
		
		//EDouble
		public RuleCall getRadiusEDoubleParserRuleCall_8_0() { return cRadiusEDoubleParserRuleCall_8_0; }
		
		//'cm'
		public Keyword getCmKeyword_9() { return cCmKeyword_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class BlockShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.BlockShape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlockShapeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLengthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLengthEDoubleParserRuleCall_4_0 = (RuleCall)cLengthAssignment_4.eContents().get(0);
		private final Keyword cCmKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cWidthAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWidthEDoubleParserRuleCall_8_0 = (RuleCall)cWidthAssignment_8.eContents().get(0);
		private final Keyword cCmKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cHKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cHeigthAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cHeigthEDoubleParserRuleCall_12_0 = (RuleCall)cHeigthAssignment_12.eContents().get(0);
		private final Keyword cCmKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//BlockShape returns BlockShape:
		//    'BlockShape' '{'
		//        'l' ':' length=EDouble 'cm'
		//        'w' ':' width=EDouble 'cm'
		//        'h' ':' heigth=EDouble 'cm'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'BlockShape' '{'
		//    'l' ':' length=EDouble 'cm'
		//    'w' ':' width=EDouble 'cm'
		//    'h' ':' heigth=EDouble 'cm'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BlockShape'
		public Keyword getBlockShapeKeyword_0() { return cBlockShapeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'l'
		public Keyword getLKeyword_2() { return cLKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//length=EDouble
		public Assignment getLengthAssignment_4() { return cLengthAssignment_4; }
		
		//EDouble
		public RuleCall getLengthEDoubleParserRuleCall_4_0() { return cLengthEDoubleParserRuleCall_4_0; }
		
		//'cm'
		public Keyword getCmKeyword_5() { return cCmKeyword_5; }
		
		//'w'
		public Keyword getWKeyword_6() { return cWKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//width=EDouble
		public Assignment getWidthAssignment_8() { return cWidthAssignment_8; }
		
		//EDouble
		public RuleCall getWidthEDoubleParserRuleCall_8_0() { return cWidthEDoubleParserRuleCall_8_0; }
		
		//'cm'
		public Keyword getCmKeyword_9() { return cCmKeyword_9; }
		
		//'h'
		public Keyword getHKeyword_10() { return cHKeyword_10; }
		
		//':'
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//heigth=EDouble
		public Assignment getHeigthAssignment_12() { return cHeigthAssignment_12; }
		
		//EDouble
		public RuleCall getHeigthEDoubleParserRuleCall_12_0() { return cHeigthEDoubleParserRuleCall_12_0; }
		
		//'cm'
		public Keyword getCmKeyword_13() { return cCmKeyword_13; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class ItemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.ItemType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicItemTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexItemTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ItemType returns ItemType:
		//    BasicItemType | ComplexItemType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicItemType | ComplexItemType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicItemType
		public RuleCall getBasicItemTypeParserRuleCall_0() { return cBasicItemTypeParserRuleCall_0; }
		
		//ComplexItemType
		public RuleCall getComplexItemTypeParserRuleCall_1() { return cComplexItemTypeParserRuleCall_1; }
	}
	public class BasicItemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.BasicItemType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasicItemTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaterialAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaterialMaterialEnumRuleCall_3_0 = (RuleCall)cMaterialAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cShapeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cShapeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cShapeAlternatives_8_0 = (Alternatives)cShapeAssignment_8.eContents().get(0);
		private final RuleCall cShapeCylinderShapeParserRuleCall_8_0_0 = (RuleCall)cShapeAlternatives_8_0.eContents().get(0);
		private final RuleCall cShapeBlockShapeParserRuleCall_8_0_1 = (RuleCall)cShapeAlternatives_8_0.eContents().get(1);
		private final Assignment cColorAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cColorColorParserRuleCall_9_0 = (RuleCall)cColorAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cMarkersKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cColonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cMarkersAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cMarkersMarkerParserRuleCall_10_3_0 = (RuleCall)cMarkersAssignment_10_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//BasicItemType returns BasicItemType:
		//    'basicItemType' name=ID '(' material=Material ')''{'
		//        'shape' ':' shape=(CylinderShape | BlockShape)
		//        color=Color
		//        ('markers' ':' '{' markers+=Marker+ '}')?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'basicItemType' name=ID '(' material=Material ')''{'
		//    'shape' ':' shape=(CylinderShape | BlockShape)
		//    color=Color
		//    ('markers' ':' '{' markers+=Marker+ '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'basicItemType'
		public Keyword getBasicItemTypeKeyword_0() { return cBasicItemTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//material=Material
		public Assignment getMaterialAssignment_3() { return cMaterialAssignment_3; }
		
		//Material
		public RuleCall getMaterialMaterialEnumRuleCall_3_0() { return cMaterialMaterialEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'shape'
		public Keyword getShapeKeyword_6() { return cShapeKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//shape=(CylinderShape | BlockShape)
		public Assignment getShapeAssignment_8() { return cShapeAssignment_8; }
		
		//(CylinderShape | BlockShape)
		public Alternatives getShapeAlternatives_8_0() { return cShapeAlternatives_8_0; }
		
		//CylinderShape
		public RuleCall getShapeCylinderShapeParserRuleCall_8_0_0() { return cShapeCylinderShapeParserRuleCall_8_0_0; }
		
		//BlockShape
		public RuleCall getShapeBlockShapeParserRuleCall_8_0_1() { return cShapeBlockShapeParserRuleCall_8_0_1; }
		
		//color=Color
		public Assignment getColorAssignment_9() { return cColorAssignment_9; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_9_0() { return cColorColorParserRuleCall_9_0; }
		
		//('markers' ':' '{' markers+=Marker+ '}')?
		public Group getGroup_10() { return cGroup_10; }
		
		//'markers'
		public Keyword getMarkersKeyword_10_0() { return cMarkersKeyword_10_0; }
		
		//':'
		public Keyword getColonKeyword_10_1() { return cColonKeyword_10_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10_2() { return cLeftCurlyBracketKeyword_10_2; }
		
		//markers+=Marker+
		public Assignment getMarkersAssignment_10_3() { return cMarkersAssignment_10_3; }
		
		//Marker
		public RuleCall getMarkersMarkerParserRuleCall_10_3_0() { return cMarkersMarkerParserRuleCall_10_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ComplexItemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.ComplexItemType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComplexItemTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cComponentsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cComponentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cComponentsComponentParserRuleCall_6_0 = (RuleCall)cComponentsAssignment_6.eContents().get(0);
		private final Assignment cComponentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cComponentsComponentParserRuleCall_7_0 = (RuleCall)cComponentsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cConnectionsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cItemConnectionsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cItemConnectionsItemConnectionParserRuleCall_12_0 = (RuleCall)cItemConnectionsAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//ComplexItemType returns ComplexItemType:
		//    'complexItemType' name=ID '{'
		//        'components' ':' '{'
		//            components+=Component
		//            (components+=Component)+
		//        '}'
		//        'connections' ':' '{'
		//            itemConnections+=ItemConnection+
		//        '}'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'complexItemType' name=ID '{'
		//    'components' ':' '{'
		//        components+=Component
		//        (components+=Component)+
		//    '}'
		//    'connections' ':' '{'
		//        itemConnections+=ItemConnection+
		//    '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'complexItemType'
		public Keyword getComplexItemTypeKeyword_0() { return cComplexItemTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'components'
		public Keyword getComponentsKeyword_3() { return cComponentsKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//components+=Component
		public Assignment getComponentsAssignment_6() { return cComponentsAssignment_6; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_6_0() { return cComponentsComponentParserRuleCall_6_0; }
		
		//(components+=Component)+
		public Assignment getComponentsAssignment_7() { return cComponentsAssignment_7; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_7_0() { return cComponentsComponentParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'connections'
		public Keyword getConnectionsKeyword_9() { return cConnectionsKeyword_9; }
		
		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//itemConnections+=ItemConnection+
		public Assignment getItemConnectionsAssignment_12() { return cItemConnectionsAssignment_12; }
		
		//ItemConnection
		public RuleCall getItemConnectionsItemConnectionParserRuleCall_12_0() { return cItemConnectionsItemConnectionParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRedEIntParserRuleCall_6_0 = (RuleCall)cRedAssignment_6.eContents().get(0);
		private final Keyword cGKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cGreenAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cGreenEIntParserRuleCall_9_0 = (RuleCall)cGreenAssignment_9.eContents().get(0);
		private final Keyword cBKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cBlueAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cBlueEIntParserRuleCall_12_0 = (RuleCall)cBlueAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Color returns Color:
		//    'color' name=EString ':' '{'
		//        'r' ':' red=EInt
		//        'g' ':' green=EInt
		//        'b' ':' blue=EInt
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'color' name=EString ':' '{'
		//    'r' ':' red=EInt
		//    'g' ':' green=EInt
		//    'b' ':' blue=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'color'
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'r'
		public Keyword getRKeyword_4() { return cRKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//red=EInt
		public Assignment getRedAssignment_6() { return cRedAssignment_6; }
		
		//EInt
		public RuleCall getRedEIntParserRuleCall_6_0() { return cRedEIntParserRuleCall_6_0; }
		
		//'g'
		public Keyword getGKeyword_7() { return cGKeyword_7; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//green=EInt
		public Assignment getGreenAssignment_9() { return cGreenAssignment_9; }
		
		//EInt
		public RuleCall getGreenEIntParserRuleCall_9_0() { return cGreenEIntParserRuleCall_9_0; }
		
		//'b'
		public Keyword getBKeyword_10() { return cBKeyword_10; }
		
		//':'
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//blue=EInt
		public Assignment getBlueAssignment_12() { return cBlueAssignment_12; }
		
		//EInt
		public RuleCall getBlueEIntParserRuleCall_12_0() { return cBlueEIntParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class MarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.Marker");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Marker returns Marker:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cItemTypeBasicItemTypeCrossReference_2_0 = (CrossReference)cItemTypeAssignment_2.eContents().get(0);
		private final RuleCall cItemTypeBasicItemTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cItemTypeBasicItemTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Component returns Component:
		//    name=ID '(' itemType=[BasicItemType] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' itemType=[BasicItemType] ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//itemType=[BasicItemType]
		public Assignment getItemTypeAssignment_2() { return cItemTypeAssignment_2; }
		
		//[BasicItemType]
		public CrossReference getItemTypeBasicItemTypeCrossReference_2_0() { return cItemTypeBasicItemTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getItemTypeBasicItemTypeIDTerminalRuleCall_2_0_1() { return cItemTypeBasicItemTypeIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ItemConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.ItemConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cComponentAComponentCrossReference_0_0 = (CrossReference)cComponentAAssignment_0.eContents().get(0);
		private final RuleCall cComponentAComponentIDTerminalRuleCall_0_0_1 = (RuleCall)cComponentAComponentCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMarkerAAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMarkerAMarkerCrossReference_2_0 = (CrossReference)cMarkerAAssignment_2.eContents().get(0);
		private final RuleCall cMarkerAMarkerIDTerminalRuleCall_2_0_1 = (RuleCall)cMarkerAMarkerCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComponentBAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cComponentBComponentCrossReference_5_0 = (CrossReference)cComponentBAssignment_5.eContents().get(0);
		private final RuleCall cComponentBComponentIDTerminalRuleCall_5_0_1 = (RuleCall)cComponentBComponentCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMarkerBAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cMarkerBMarkerCrossReference_7_0 = (CrossReference)cMarkerBAssignment_7.eContents().get(0);
		private final RuleCall cMarkerBMarkerIDTerminalRuleCall_7_0_1 = (RuleCall)cMarkerBMarkerCrossReference_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ItemConnection returns ItemConnection:
		//    componentA=[Component] '(' markerA=[Marker] ')' '<->' componentB=[Component] '(' markerB=[Marker] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//componentA=[Component] '(' markerA=[Marker] ')' '<->' componentB=[Component] '(' markerB=[Marker] ')'
		public Group getGroup() { return cGroup; }
		
		//componentA=[Component]
		public Assignment getComponentAAssignment_0() { return cComponentAAssignment_0; }
		
		//[Component]
		public CrossReference getComponentAComponentCrossReference_0_0() { return cComponentAComponentCrossReference_0_0; }
		
		//ID
		public RuleCall getComponentAComponentIDTerminalRuleCall_0_0_1() { return cComponentAComponentIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//markerA=[Marker]
		public Assignment getMarkerAAssignment_2() { return cMarkerAAssignment_2; }
		
		//[Marker]
		public CrossReference getMarkerAMarkerCrossReference_2_0() { return cMarkerAMarkerCrossReference_2_0; }
		
		//ID
		public RuleCall getMarkerAMarkerIDTerminalRuleCall_2_0_1() { return cMarkerAMarkerIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_4() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_4; }
		
		//componentB=[Component]
		public Assignment getComponentBAssignment_5() { return cComponentBAssignment_5; }
		
		//[Component]
		public CrossReference getComponentBComponentCrossReference_5_0() { return cComponentBComponentCrossReference_5_0; }
		
		//ID
		public RuleCall getComponentBComponentIDTerminalRuleCall_5_0_1() { return cComponentBComponentIDTerminalRuleCall_5_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//markerB=[Marker]
		public Assignment getMarkerBAssignment_7() { return cMarkerBAssignment_7; }
		
		//[Marker]
		public CrossReference getMarkerBMarkerCrossReference_7_0() { return cMarkerBMarkerCrossReference_7_0; }
		
		//ID
		public RuleCall getMarkerBMarkerIDTerminalRuleCall_7_0_1() { return cMarkerBMarkerIDTerminalRuleCall_7_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class MaterialElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Tutorial.Material");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWOODEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWOODWOODKeyword_0_0 = (Keyword)cWOODEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTEELEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTEELSTEELKeyword_1_0 = (Keyword)cSTEELEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGOLDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGOLDGOLDKeyword_2_0 = (Keyword)cGOLDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOPPEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOPPERCOPPERKeyword_3_0 = (Keyword)cCOPPEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Material:
		//    WOOD | STEEL | GOLD | COPPER
		//;
		public EnumRule getRule() { return rule; }
		
		//WOOD | STEEL | GOLD | COPPER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WOOD
		public EnumLiteralDeclaration getWOODEnumLiteralDeclaration_0() { return cWOODEnumLiteralDeclaration_0; }
		
		public Keyword getWOODWOODKeyword_0_0() { return cWOODWOODKeyword_0_0; }
		
		//STEEL
		public EnumLiteralDeclaration getSTEELEnumLiteralDeclaration_1() { return cSTEELEnumLiteralDeclaration_1; }
		
		public Keyword getSTEELSTEELKeyword_1_0() { return cSTEELSTEELKeyword_1_0; }
		
		//GOLD
		public EnumLiteralDeclaration getGOLDEnumLiteralDeclaration_2() { return cGOLDEnumLiteralDeclaration_2; }
		
		public Keyword getGOLDGOLDKeyword_2_0() { return cGOLDGOLDKeyword_2_0; }
		
		//COPPER
		public EnumLiteralDeclaration getCOPPEREnumLiteralDeclaration_3() { return cCOPPEREnumLiteralDeclaration_3; }
		
		public Keyword getCOPPERCOPPERKeyword_3_0() { return cCOPPERCOPPERKeyword_3_0; }
	}
	
	private final FactoryElements pFactory;
	private final ShapeElements pShape;
	private final CylinderShapeElements pCylinderShape;
	private final BlockShapeElements pBlockShape;
	private final ItemTypeElements pItemType;
	private final BasicItemTypeElements pBasicItemType;
	private final ComplexItemTypeElements pComplexItemType;
	private final ColorElements pColor;
	private final MarkerElements pMarker;
	private final ComponentElements pComponent;
	private final ItemConnectionElements pItemConnection;
	private final MaterialElements eMaterial;
	private final EStringElements pEString;
	private final EDoubleElements pEDouble;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TutorialGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFactory = new FactoryElements();
		this.pShape = new ShapeElements();
		this.pCylinderShape = new CylinderShapeElements();
		this.pBlockShape = new BlockShapeElements();
		this.pItemType = new ItemTypeElements();
		this.pBasicItemType = new BasicItemTypeElements();
		this.pComplexItemType = new ComplexItemTypeElements();
		this.pColor = new ColorElements();
		this.pMarker = new MarkerElements();
		this.pComponent = new ComponentElements();
		this.pItemConnection = new ItemConnectionElements();
		this.eMaterial = new MaterialElements();
		this.pEString = new EStringElements();
		this.pEDouble = new EDoubleElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Tutorial".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Factory returns Factory:
	//    'factory' name=ID '{'
	//        (itemTypes+=ItemType)+
	//    '}';
	public FactoryElements getFactoryAccess() {
		return pFactory;
	}
	
	public ParserRule getFactoryRule() {
		return getFactoryAccess().getRule();
	}
	
	//Shape returns Shape:
	//    BlockShape | CylinderShape
	//;
	public ShapeElements getShapeAccess() {
		return pShape;
	}
	
	public ParserRule getShapeRule() {
		return getShapeAccess().getRule();
	}
	
	//CylinderShape returns CylinderShape:
	//    'CylinderShape' '{'
	//        'l' ':' length=EDouble 'cm'
	//        'r' ':' radius=EDouble 'cm'
	//    '}'
	//;
	public CylinderShapeElements getCylinderShapeAccess() {
		return pCylinderShape;
	}
	
	public ParserRule getCylinderShapeRule() {
		return getCylinderShapeAccess().getRule();
	}
	
	//BlockShape returns BlockShape:
	//    'BlockShape' '{'
	//        'l' ':' length=EDouble 'cm'
	//        'w' ':' width=EDouble 'cm'
	//        'h' ':' heigth=EDouble 'cm'
	//    '}'
	//;
	public BlockShapeElements getBlockShapeAccess() {
		return pBlockShape;
	}
	
	public ParserRule getBlockShapeRule() {
		return getBlockShapeAccess().getRule();
	}
	
	//ItemType returns ItemType:
	//    BasicItemType | ComplexItemType
	//;
	public ItemTypeElements getItemTypeAccess() {
		return pItemType;
	}
	
	public ParserRule getItemTypeRule() {
		return getItemTypeAccess().getRule();
	}
	
	//BasicItemType returns BasicItemType:
	//    'basicItemType' name=ID '(' material=Material ')''{'
	//        'shape' ':' shape=(CylinderShape | BlockShape)
	//        color=Color
	//        ('markers' ':' '{' markers+=Marker+ '}')?
	//    '}'
	//;
	public BasicItemTypeElements getBasicItemTypeAccess() {
		return pBasicItemType;
	}
	
	public ParserRule getBasicItemTypeRule() {
		return getBasicItemTypeAccess().getRule();
	}
	
	//ComplexItemType returns ComplexItemType:
	//    'complexItemType' name=ID '{'
	//        'components' ':' '{'
	//            components+=Component
	//            (components+=Component)+
	//        '}'
	//        'connections' ':' '{'
	//            itemConnections+=ItemConnection+
	//        '}'
	//    '}'
	//;
	public ComplexItemTypeElements getComplexItemTypeAccess() {
		return pComplexItemType;
	}
	
	public ParserRule getComplexItemTypeRule() {
		return getComplexItemTypeAccess().getRule();
	}
	
	//Color returns Color:
	//    'color' name=EString ':' '{'
	//        'r' ':' red=EInt
	//        'g' ':' green=EInt
	//        'b' ':' blue=EInt
	//    '}'
	//;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Marker returns Marker:
	//    name=ID
	//;
	public MarkerElements getMarkerAccess() {
		return pMarker;
	}
	
	public ParserRule getMarkerRule() {
		return getMarkerAccess().getRule();
	}
	
	//Component returns Component:
	//    name=ID '(' itemType=[BasicItemType] ')'
	//;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//ItemConnection returns ItemConnection:
	//    componentA=[Component] '(' markerA=[Marker] ')' '<->' componentB=[Component] '(' markerB=[Marker] ')'
	//;
	public ItemConnectionElements getItemConnectionAccess() {
		return pItemConnection;
	}
	
	public ParserRule getItemConnectionRule() {
		return getItemConnectionAccess().getRule();
	}
	
	//enum Material:
	//    WOOD | STEEL | GOLD | COPPER
	//;
	public MaterialElements getMaterialAccess() {
		return eMaterial;
	}
	
	public EnumRule getMaterialRule() {
		return getMaterialAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

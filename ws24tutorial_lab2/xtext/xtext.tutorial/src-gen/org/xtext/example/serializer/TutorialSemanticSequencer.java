/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.services.TutorialGrammarAccess;
import tutorial.BasicItemType;
import tutorial.BlockShape;
import tutorial.Color;
import tutorial.ComplexItemType;
import tutorial.Component;
import tutorial.CylinderShape;
import tutorial.Factory;
import tutorial.ItemConnection;
import tutorial.Marker;
import tutorial.TutorialPackage;

@SuppressWarnings("all")
public class TutorialSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TutorialGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TutorialPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TutorialPackage.BASIC_ITEM_TYPE:
				sequence_BasicItemType(context, (BasicItemType) semanticObject); 
				return; 
			case TutorialPackage.BLOCK_SHAPE:
				sequence_BlockShape(context, (BlockShape) semanticObject); 
				return; 
			case TutorialPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case TutorialPackage.COMPLEX_ITEM_TYPE:
				sequence_ComplexItemType(context, (ComplexItemType) semanticObject); 
				return; 
			case TutorialPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case TutorialPackage.CYLINDER_SHAPE:
				sequence_CylinderShape(context, (CylinderShape) semanticObject); 
				return; 
			case TutorialPackage.FACTORY:
				sequence_Factory(context, (Factory) semanticObject); 
				return; 
			case TutorialPackage.ITEM_CONNECTION:
				sequence_ItemConnection(context, (ItemConnection) semanticObject); 
				return; 
			case TutorialPackage.MARKER:
				sequence_Marker(context, (Marker) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ItemType returns BasicItemType
	 *     BasicItemType returns BasicItemType
	 *
	 * Constraint:
	 *     (name=ID material=Material (shape=CylinderShape | shape=BlockShape) color=Color markers+=Marker*)
	 * </pre>
	 */
	protected void sequence_BasicItemType(ISerializationContext context, BasicItemType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Shape returns BlockShape
	 *     BlockShape returns BlockShape
	 *
	 * Constraint:
	 *     (length=EDouble width=EDouble heigth=EDouble)
	 * </pre>
	 */
	protected void sequence_BlockShape(ISerializationContext context, BlockShape semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.SHAPE__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.SHAPE__LENGTH));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.BLOCK_SHAPE__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.BLOCK_SHAPE__WIDTH));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.BLOCK_SHAPE__HEIGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.BLOCK_SHAPE__HEIGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBlockShapeAccess().getLengthEDoubleParserRuleCall_4_0(), semanticObject.getLength());
		feeder.accept(grammarAccess.getBlockShapeAccess().getWidthEDoubleParserRuleCall_8_0(), semanticObject.getWidth());
		feeder.accept(grammarAccess.getBlockShapeAccess().getHeigthEDoubleParserRuleCall_12_0(), semanticObject.getHeigth());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Color returns Color
	 *
	 * Constraint:
	 *     (name=EString red=EInt green=EInt blue=EInt)
	 * </pre>
	 */
	protected void sequence_Color(ISerializationContext context, Color semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.COLOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.COLOR__NAME));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.COLOR__RED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.COLOR__RED));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.COLOR__GREEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.COLOR__GREEN));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.COLOR__BLUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.COLOR__BLUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getColorAccess().getRedEIntParserRuleCall_6_0(), semanticObject.getRed());
		feeder.accept(grammarAccess.getColorAccess().getGreenEIntParserRuleCall_9_0(), semanticObject.getGreen());
		feeder.accept(grammarAccess.getColorAccess().getBlueEIntParserRuleCall_12_0(), semanticObject.getBlue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ItemType returns ComplexItemType
	 *     ComplexItemType returns ComplexItemType
	 *
	 * Constraint:
	 *     (name=ID components+=Component components+=Component+ itemConnections+=ItemConnection+)
	 * </pre>
	 */
	protected void sequence_ComplexItemType(ISerializationContext context, ComplexItemType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (name=ID itemType=[BasicItemType|ID])
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.COMPONENT__NAME));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.COMPONENT__ITEM_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.COMPONENT__ITEM_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getComponentAccess().getItemTypeBasicItemTypeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(TutorialPackage.Literals.COMPONENT__ITEM_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Shape returns CylinderShape
	 *     CylinderShape returns CylinderShape
	 *
	 * Constraint:
	 *     (length=EDouble radius=EDouble)
	 * </pre>
	 */
	protected void sequence_CylinderShape(ISerializationContext context, CylinderShape semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.SHAPE__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.SHAPE__LENGTH));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.CYLINDER_SHAPE__RADIUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.CYLINDER_SHAPE__RADIUS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCylinderShapeAccess().getLengthEDoubleParserRuleCall_4_0(), semanticObject.getLength());
		feeder.accept(grammarAccess.getCylinderShapeAccess().getRadiusEDoubleParserRuleCall_8_0(), semanticObject.getRadius());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Factory returns Factory
	 *
	 * Constraint:
	 *     (name=ID itemTypes+=ItemType+)
	 * </pre>
	 */
	protected void sequence_Factory(ISerializationContext context, Factory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ItemConnection returns ItemConnection
	 *
	 * Constraint:
	 *     (componentA=[Component|ID] markerA=[Marker|ID] componentB=[Component|ID] markerB=[Marker|ID])
	 * </pre>
	 */
	protected void sequence_ItemConnection(ISerializationContext context, ItemConnection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.ITEM_CONNECTION__COMPONENT_A) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.ITEM_CONNECTION__COMPONENT_A));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.ITEM_CONNECTION__MARKER_A) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.ITEM_CONNECTION__MARKER_A));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.ITEM_CONNECTION__COMPONENT_B) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.ITEM_CONNECTION__COMPONENT_B));
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.ITEM_CONNECTION__MARKER_B) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.ITEM_CONNECTION__MARKER_B));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemConnectionAccess().getComponentAComponentIDTerminalRuleCall_0_0_1(), semanticObject.eGet(TutorialPackage.Literals.ITEM_CONNECTION__COMPONENT_A, false));
		feeder.accept(grammarAccess.getItemConnectionAccess().getMarkerAMarkerIDTerminalRuleCall_2_0_1(), semanticObject.eGet(TutorialPackage.Literals.ITEM_CONNECTION__MARKER_A, false));
		feeder.accept(grammarAccess.getItemConnectionAccess().getComponentBComponentIDTerminalRuleCall_5_0_1(), semanticObject.eGet(TutorialPackage.Literals.ITEM_CONNECTION__COMPONENT_B, false));
		feeder.accept(grammarAccess.getItemConnectionAccess().getMarkerBMarkerIDTerminalRuleCall_7_0_1(), semanticObject.eGet(TutorialPackage.Literals.ITEM_CONNECTION__MARKER_B, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Marker returns Marker
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Marker(ISerializationContext context, Marker semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TutorialPackage.Literals.MARKER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TutorialPackage.Literals.MARKER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMarkerAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
